(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{"./src/Model.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return i});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),b=(n("react"),n("./node_modules/@mdx-js/react/dist/index.es.js")),r={},l="wrapper";function i(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(b.b)(l,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"api"},"API"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Method"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Example"),Object(b.b)("th",Object.assign({parentName:"tr"},{align:null}),"Remark"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"constructor(freeObject = {}, validator = new Validator())")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"static object2ModelIds(prefix, modelIds = [], object = {})")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"('x',[],{a:{b:true,c:false,d:true}})"),", modelIds will ",Object(b.b)("inlineCode",{parentName:"td"},"['x.a.b','x.a.d']"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"static parseSao(sao)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"('x',[],{a:{b:true,c:false,d:true}})")," -> ",Object(b.b)("inlineCode",{parentName:"td"},"['x.a.b','x.a.d']")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"sao is string","[reg]",", array","[string]"," or object")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"zzzXX[YYY]Listener(id,[ type,] listener)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"XX")," is id or reg, ",Object(b.b)("inlineCode",{parentName:"td"},"YYY")," is Changed or Errored, ",Object(b.b)("inlineCode",{parentName:"td"},"zzz")," is add or rmv")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"fireYYYEvent(id, old, current)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"fireEvent(evt)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"getAllErrors()")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"getErrors(id)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"setErrors(errors = {})")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"getFreeObject()")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"setFreeObject(freeObject = {})")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"getValidator()")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"hasErrors()")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"..."),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"..."),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),"...")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"skVal(id, value)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"addAllValidatorMonitor()")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"zzzValidatorMonitor(modelId, config)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"zzz")," is add or rmv")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"execValidate(ruleKey, modelId, ruleFunc, model, setting)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"validate(evt)")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"validateAll()")),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(b.b)("td",Object.assign({parentName:"tr"},{align:null}))))),Object(b.b)("h1",{id:"prepare"},"Prepare"),Object(b.b)("pre",null,Object(b.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "req": {\n    "enc": "string, encode string, if need, else undefined",\n    "pri": {\n      "desc1": "pri0, pri1 or pri2 etc",\n      "desc2": "search by select component for lst service",\n      "desc3": "id for one service"\n    },\n    "pub": {\n      "desc1": "will send to server every request, you can take token ...",\n      "desc2": "priEncode: if true, will send enc, for rpc or open api request",\n      "desc3": "appName",\n      "desc4": "sysName",\n      "desc5": "localStore",\n      "desc6": "sessionStore",\n      "desc7": "cookieStore, if cookies not exist, get from this"\n    }\n  },\n  "resp": {\n    "pris": {\n      "pri0": {\n        "ext": {\n          "desc1": "will send to server",\n          "desc2": "take table pagination, sorter etc",\n          "desc3": "createDatetime range"\n        },\n        "obj": {\n          "desc": "this is entity mapping db"\n        },\n        "rtn": {\n          "desc1": "[different with pubs.pub0, this response area]",\n          "desc2": "will not send to server",\n          "desc3": "received table data, select data"\n        }\n      },\n      "pri1": {}\n    },\n    "pubs": {\n      "codes": {},\n      "pub0": {\n        "desc1": "[different with rtn, this ui area]",\n        "desc2": "mapping pris.pri0, use by component auto generate"\n      },\n      "pub1": {}\n    }\n  }\n}\n')))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/Model.mdx"}}),i.isMDXComponent=!0}}]);